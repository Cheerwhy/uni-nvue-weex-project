<template>
	<list v-if="page.type === 'list'" :show-scrollbar="false">
		<refresh class="refresh" @refresh="onRefresh" @pullingdown="onPullingDown"
			:display="page.refreshing ? 'show' : 'hide'">
			<loading-indicator class="indicator"></loading-indicator>
		</refresh>
		<cell :ref="page.pageName+'topCell'"></cell>
		<cell v-for="(item,index) in page.data" :ref="'listItem' + index" :key="index">
			<div class="panel" @click="cellClick">
				<image class="goods-img" :src="url(item.gImage)"></image>
			</div>
		</cell>
		<loading class="loading" @loading="onloading" :display="page.loading ? 'show' : 'hide'">
			<loading-indicator class="indicator"></loading-indicator>
		</loading>
	</list>
	<waterfall v-else column-count="2" :show-scrollbar="false" column-gap="10" left-gap="10" right-gap="10">
		<refresh class="refresh" @refresh="onRefresh" @pullingdown="onPullingDown"
			:display="page.refreshing ? 'show' : 'hide'">
			<loading-indicator class="indicator"></loading-indicator>
		</refresh>
		<cell :ref="page.pageName+'topCell'"></cell>
		<cell v-for="(item,index) in page.data" :ref="'waterfallItem' + index" :key="index">
			<div class="cell-content" @click="cellClick">
				<image class="goods-img2" :src="url(item.gImage)" :style="{height:getHeight(item.gImage)}"
					:autoBitmapRecycle="false" @load="imgLoad">
				</image>
				<div class="goods-img2-content">
					<text class="text">{{item.gName}}</text>
				</div>
				<div class="goods-owner">
					<image class="goods-avatar" :src="baseUrl + item.avatar" @load="imgLoad" @click="avatarClick"
						:uid="item.uid">
					</image>
					<text class="text2">{{item.userName}}</text>
				</div>
			</div>
		</cell>
		<cell @appear="loadMore"></cell>
	</waterfall>
</template>

<script>
	import {
		getGoods
	} from "../api/index.js"
	const dom = weex.requireModule('dom');
	const animation = weex.requireModule('animation');
	const modal = weex.requireModule('modal');
	export default {
		props: {
			// 当前页面对象
			page: Object,
			// 当前页面索引值
			index: Number,
			// 图片前缀
			baseUrl: String,
		},
		mounted() {
			console.log(`${this.page.pageName} mounted`);
			uni.$on("tabItemTap", (val) => {
				if (val === this.index) {
					console.log(`现在是${this.page.pageName}页面,触发滚动至顶部`)
					const el = this.$refs[this.page.pageName + "topCell"];
					dom.scrollToElement(el, {})
				}
			});
			uni.$on("sliderChange", (val) => {
				if (val === this.index) {
					console.log(`切换至 ${this.page.pageName}页面,数据:${val}`)
				}
			});
			this.getGoods();
		},
		beforeDestroy() {
			// 在这里取消监听，避免重复监听
			uni.$off("tabItemTap");
			uni.$off("sliderChange");
		},
		methods: {
			// 图像加载事件,给予透明度渐变的效果
			imgLoad(e) {
				animation.transition(e.target, {
					styles: {
						opacity: 1
					},
					duration: 200,
					timingFunction: 'linear',
					needLayout: false,
					delay: 0
				})
			},
			// 加载更多
			loadMore() {
				this.getGoods();
			},
			onPullingDown(e) {},
			// 计算图片高度
			getHeight(urls) {
				// 解析JSON数据
				let url = JSON.parse(urls);
				// 图片宽度固定，利用图片的宽高比计算图片高度
				let width = (750 - this.page.column_gap) / 2;
				let height = width * url.scale + 'px';
				return height;
			},
			// 列表元素、瀑布流元素点击事件
			cellClick() {
				uni.navigateTo({
					url: "/pages/details/details",
				})
			},
			// 头像点击事件
			avatarClick(e) {
				let uid = e.target.attr.uid;
				console.log(`您点击了用户头像，此用户的uid为${uid}`)
			},
			// 解析图片url
			url(urls) {
				let url = JSON.parse(urls);
				return this.baseUrl + url.url;
			},
			// 下拉刷新事件
			onRefresh() {
				this.page.refreshing = true;
				this.getGoods().then(() => {
					this.page.refreshing = false;
				})
			},
			// 上拉加载事件
			onloading() {
				this.page.loading = true;
				this.getGoods().then(() => {
					this.page.loading = false;
				});
			},
			// 获取数据
			async getGoods() {
				let res = await getGoods({
					page: this.page.currentPage++
				})
				this.page.data = [...this.page.data, ...res.data.data];
				// this.$nextTick(() => {
				// 	if (this.page.currentPage > 1) {
				// 		let data = `goods${this.goodsList.data.length - 20}`;
				// 		const el = this.$refs[data][0];
				// 		dom.scrollToElement(el, {})
				// 	}
				// })
			}
		}
	}
</script>

<style>
	.indicator {
		margin: 20rpx 0;
		height: 60rpx;
		width: 60rpx;
		color: blue;
	}


	.refresh {
		align-items: center;
		background: #f5f5f5;
	}

	.loading {
		width: 750rpx;
		align-items: center;
		background: #fff;
	}

	.goods-img {
		width: 300rpx;
		border-radius: 9rpx;
		border: 1px solid #f5f5f5;
	}

	.panel {
		margin-bottom: 40rpx;
		background: #fff;
		box-shadow: 0 8rpx 8rpx rgba(0, 0, 0, 0.2);
		padding: 20rpx;
		transition: background-color .1s linear
	}

	.panel:active {
		background: #F0F0F0;
	}

	.goods-img2 {
		opacity: 0;
		box-shadow: 0 1rpx 3rpx rgba(0, 0, 0, 0.2);
		border-radius: 9rpx 9rpx 0 0;
	}

	.goods-img2-content {
		padding: 20rpx;
	}

	.goods-owner {
		padding: 20rpx;
		flex-direction: row;
		align-items: center;
		justify-content: flex-start;
	}

	.goods-avatar {
		width: 32rpx;
		height: 32rpx;
		border-radius: 16rpx;
	}

	.text {
		font-size: 32rpx;
		line-height: 32rpx;
		text-overflow: clip;
		lines: 2;
	}

	.text2 {
		margin-left: 10rpx;
	}

	.cell-content {
		overflow: hidden;
		background: #fff;
		margin-bottom: 10rpx;
		border-radius: 9rpx;
		box-shadow: 0 8rpx 8rpx rgba(0, 0, 0, 0.2);
	}
</style>
